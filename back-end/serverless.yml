# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hey-bevan
#app: your-app-name
#tenant: your-tenant-name
plugins:
  - serverless-domain-manager

custom:
  tableName: 'hey-bevan-table-${self:provider.stage}'
  customDomain:
    domainName: hey-bevan.com
    certificateName: "*.hey-bevan.com"
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: dotnetcore2.1
  region: ap-southeast-2


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["HeyBevanTable", "Arn" ] }
environment:
  USERS_TABLE: ${self:custom.tableName}


# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true

functions:
  addBevan:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::AddBevan
    memorySize: 128
    description: add bevan
    events:
      - http:
          path: addBevan
          method: post
  challenge:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Challenge
    memorySize: 128
    description: challenge auth
    events:
      - http:
          path: challenge
          method: post
  GetAll:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::GetAll
    memorySize: 128
    description: get all bevans
    events:
      - http:
          path: getAll
          method: get
  GetById:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::GetById
    memorySize: 128
    description: get bevan by id
    events:
      - http:
          path: getById
          method: get

    # you can add packaging information here
    package:
      artifact: bin/release/netcoreapp2.1/hello.zip
    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    
    
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
    HeyBevanTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
