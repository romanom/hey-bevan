{
  "service": {
    "service": "hey-bevan",
    "serviceObject": {
      "name": "hey-bevan"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "dotnetcore2.1",
      "region": "ap-southeast-2",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "AddBevanLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hey-bevan-dev-addBevan"
            }
          },
          "ChallengeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hey-bevan-dev-challenge"
            }
          },
          "GetAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hey-bevan-dev-GetAll"
            }
          },
          "GetByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hey-bevan-dev-GetById"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "hey-bevan",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hey-bevan-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hey-bevan-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "hey-bevan",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AddBevanLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hey-bevan/dev/1567644510975-2019-09-05T00:48:30.975Z/AddBevan.zip"
              },
              "FunctionName": "hey-bevan-dev-addBevan",
              "Handler": "CsharpHandlers::AwsDotnetCsharp.Handler::AddBevan",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "dotnetcore2.1",
              "Timeout": 6,
              "Description": "add bevan"
            },
            "DependsOn": [
              "AddBevanLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AddBevanLambdaVersionQgh5KoXGvzZYIBOBmQkiFo2XAh6GFj1Ym1lDJZRtY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddBevanLambdaFunction"
              },
              "CodeSha256": "C4c+3zO+IHT+sqyInQMoTMN+6mHWa+z0gsVV8QCY+a4=",
              "Description": "add bevan"
            }
          },
          "ChallengeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hey-bevan/dev/1567644510975-2019-09-05T00:48:30.975Z/Challenge.zip"
              },
              "FunctionName": "hey-bevan-dev-challenge",
              "Handler": "CsharpHandlers::AwsDotnetCsharp.Handler::Challenge",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "dotnetcore2.1",
              "Timeout": 6,
              "Description": "challenge auth"
            },
            "DependsOn": [
              "ChallengeLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ChallengeLambdaVersioneo6S1S2uxfHIe2reBQCyUSAU4u9wmHyRbinsDCqGQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChallengeLambdaFunction"
              },
              "CodeSha256": "BUN1hg9sUH+3MVE0jfRjCUAqgkI5i0UPjMX0shaN41U=",
              "Description": "challenge auth"
            }
          },
          "GetAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hey-bevan/dev/1567644510975-2019-09-05T00:48:30.975Z/GetAll.zip"
              },
              "FunctionName": "hey-bevan-dev-GetAll",
              "Handler": "CsharpHandlers::AwsDotnetCsharp.Handler::GetAll",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "dotnetcore2.1",
              "Timeout": 6,
              "Description": "get all bevans"
            },
            "DependsOn": [
              "GetAllLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllLambdaVersionmSMtYV0Xmr0KZREnzRXIFYC1oXYBSEmtSsxqdGeU9II": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllLambdaFunction"
              },
              "CodeSha256": "C1FE7L2DEEIS4K6oJM/jR0pzdEemfHy7UuoXuYBIBJM=",
              "Description": "get all bevans"
            }
          },
          "GetByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hey-bevan/dev/1567644510975-2019-09-05T00:48:30.975Z/GetById.zip"
              },
              "FunctionName": "hey-bevan-dev-GetById",
              "Handler": "CsharpHandlers::AwsDotnetCsharp.Handler::GetById",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "dotnetcore2.1",
              "Timeout": 6,
              "Description": "get bevan by id"
            },
            "DependsOn": [
              "GetByIdLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetByIdLambdaVersionv5U2R43uvT7kjHtbaUsf0RsDrPfJ4yuZZ4TrjbP1XJI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetByIdLambdaFunction"
              },
              "CodeSha256": "ZEBB0Dztp5rsX+1nUniiB6IAxl4W+MXhyqEzDhwkSdg=",
              "Description": "get bevan by id"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-hey-bevan",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceAddbevan": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addBevan",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceChallenge": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "challenge",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetall": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getAll",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetbyid": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getById",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAddbevanPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddbevan"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddBevanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodChallengePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceChallenge"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChallengeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGetallGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetall"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGetbyidGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetbyid"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1567644510161": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAddbevanPost",
              "ApiGatewayMethodChallengePost",
              "ApiGatewayMethodGetallGet",
              "ApiGatewayMethodGetbyidGet"
            ]
          },
          "AddBevanLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddBevanLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChallengeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChallengeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HeyBevanTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "hey-bevan-table-dev"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "AddBevanLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddBevanLambdaVersionQgh5KoXGvzZYIBOBmQkiFo2XAh6GFj1Ym1lDJZRtY"
            }
          },
          "ChallengeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChallengeLambdaVersioneo6S1S2uxfHIe2reBQCyUSAU4u9wmHyRbinsDCqGQ"
            }
          },
          "GetAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllLambdaVersionmSMtYV0Xmr0KZREnzRXIFYC1oXYBSEmtSsxqdGeU9II"
            }
          },
          "GetByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetByIdLambdaVersionv5U2R43uvT7kjHtbaUsf0RsDrPfJ4yuZZ4TrjbP1XJI"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "tableName": "hey-bevan-table-dev",
      "customDomain": {
        "domainName": "hey-bevan.com",
        "certificateArn": "arn:aws:acm:us-east-1:038405731550:certificate/29abc4e1-433f-4440-ba0e-3d03b1e0ad8c",
        "basePath": "",
        "stage": "dev",
        "createRoute53Record": true
      }
    },
    "pluginsData": {},
    "functions": {
      "addBevan": {
        "handler": "CsharpHandlers::AwsDotnetCsharp.Handler::AddBevan",
        "memorySize": 128,
        "description": "add bevan",
        "events": [
          {
            "http": {
              "path": "addBevan",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": "bin/release/netcoreapp2.1/AddBevan.zip"
        },
        "name": "hey-bevan-dev-addBevan",
        "memory": 128,
        "timeout": 6,
        "runtime": "dotnetcore2.1",
        "vpc": {}
      },
      "challenge": {
        "handler": "CsharpHandlers::AwsDotnetCsharp.Handler::Challenge",
        "memorySize": 128,
        "description": "challenge auth",
        "events": [
          {
            "http": {
              "path": "challenge",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": "bin/release/netcoreapp2.1/Challenge.zip"
        },
        "name": "hey-bevan-dev-challenge",
        "memory": 128,
        "timeout": 6,
        "runtime": "dotnetcore2.1",
        "vpc": {}
      },
      "GetAll": {
        "handler": "CsharpHandlers::AwsDotnetCsharp.Handler::GetAll",
        "memorySize": 128,
        "description": "get all bevans",
        "events": [
          {
            "http": {
              "path": "getAll",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": "bin/release/netcoreapp2.1/GetAll.zip"
        },
        "name": "hey-bevan-dev-GetAll",
        "memory": 128,
        "timeout": 6,
        "runtime": "dotnetcore2.1",
        "vpc": {}
      },
      "GetById": {
        "handler": "CsharpHandlers::AwsDotnetCsharp.Handler::GetById",
        "memorySize": 128,
        "description": "get bevan by id",
        "events": [
          {
            "http": {
              "path": "getById",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "artifact": "bin/release/netcoreapp2.1/GetById.zip"
        },
        "name": "hey-bevan-dev-GetById",
        "memory": 128,
        "timeout": 6,
        "runtime": "dotnetcore2.1",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "HeyBevanTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "hey-bevan-table-dev"
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {}
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/hey-bevan/dev/1567644510975-2019-09-05T00:48:30.975Z",
    "artifact": ""
  }
}